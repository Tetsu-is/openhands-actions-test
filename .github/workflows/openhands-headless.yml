name: Run Python Script on Label

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
    contents: write
    pull-requests: write
    issues: write

jobs:
  run-headless-mode:
    if : |
        github.event.label.name == 'headless'
    runs-on: ubuntu-latest
    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: "3.12"

        - name: Get latest versions and create requirements.txt
          run: |
            python -m pip index versions openhands-ai > openhands_versions.txt
            OPENHANDS_VERSION=$(head -n 1 openhands_versions.txt | awk '{print $2}' | tr -d '()')
            # Create a new requirements.txt locally within the workflow, ensuring no reference to the repo's file
            echo "openhands-ai==${OPENHANDS_VERSION}" > /tmp/requirements.txt
            cat /tmp/requirements.txt

        - name: Cache pip dependencies
          if: |
            !(
                github.event.label.name == 'fix-me-experimental' ||
                (
                    (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
                    contains(github.event.comment.body, '@openhands-agent-exp')
                ) ||
                (
                    github.event_name == 'pull_request_review' &&
                    contains(github.event.review.body, '@openhands-agent-exp')
                )
            )
          uses: actions/cache@v4
          with:
              path: ${{ env.pythonLocation }}/lib/python3.12/site-packages/*
              key: ${{ runner.os }}-pip-openhands-resolver-${{ hashFiles('/tmp/requirements.txt') }}
              restore-keys: |
                ${{ runner.os }}-pip-openhands-resolver-${{ hashFiles('/tmp/requirements.txt') }}
        
        - name: Check required environment variables
          run: |
            if [ -z "${{ secrets.OPENHANDS_PAT_TOKEN }}" ]; then
              echo "Error: OPENHANDS_PAT_TOKEN is not set."
              exit 1
            fi

        - name: Set environment variables
          run: |
            echo "ISSUE_NUMBER=${{ github.event.issue.number || github.event.pull_request.number }}" >> $GITHUB_ENV
        
        - name: Comment on issue or PR
          uses: actions/github-script@v7
          with:
            github-token: ${{ secrets.OPENHANDS_PAT_TOKEN }}
            script: |
                const issueType = process.env.ISSUE_TYPE;
                github.rest.issues.createComment({
                issue_number: ${{ env.ISSUE_NUMBER }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `[OpenHands](https://github.com/All-Hands-AI/OpenHands) started fixing the ${issueType}! You can monitor the progress [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).`
                });
        
        - name: Install OpenHands
          id: install_openhands
          uses: actions/github-script@v7
          env:
            COMMENT_BODY: ${{ github.event.comment.body || '' }}
            REVIEW_BODY: ${{ github.event.review.body || '' }}
            LABEL_NAME: ${{ github.event.label.name || '' }}
            EVENT_NAME: ${{ github.event_name }}
          with:
            script: |
                const commentBody = process.env.COMMENT_BODY.trim();
                const reviewBody = process.env.REVIEW_BODY.trim();
                const labelName = process.env.LABEL_NAME.trim();
                const eventName = process.env.EVENT_NAME.trim();
                // Check conditions
                const isExperimentalLabel = labelName === "fix-me-experimental";
                const isIssueCommentExperimental =
                    (eventName === "issue_comment" || eventName === "pull_request_review_comment") &&
                    commentBody.includes("@openhands-agent-exp");
                const isReviewCommentExperimental =
                    eventName === "pull_request_review" && reviewBody.includes("@openhands-agent-exp");
                // Set output variable
                core.setOutput('isExperimental', isExperimentalLabel || isIssueCommentExperimental || isReviewCommentExperimental);
                // Perform package installation
                console.log("Installing experimental OpenHands...");
                await exec.exec("python -m pip install --upgrade pip");
                await exec.exec("pip install git+https://github.com/all-hands-ai/openhands.git");

        - name: Run Headless Mode
          env:
            SANDBOX_RUNTIME_CONTAINER_IMAGE: docker.all-hands.dev/all-hands-ai/runtime:0.39-nikolaik
            SANDBOX_USER_ID: ${{ github.actor }}
            SANDBOX_VOLUMES: /tmp:/tmp
            LLM_API_KEY: ${{ secrets.OPENHANDS_LLM_API_KEY }}
            LLM_MODEL: ${{ secrets.OPENHANDS_LLM_MODEL }}
            LOG_ALL_EVENTS: true

          run: |
            echo "Run Headless Mode"
            cd /tmp && python -m openhands.core.main -t "fix documentation for PullRequest ${{ env.ISSUE_NUMBER }}. [headless]"
        
        - name: Comment on issue or PR
          uses: actions/github-script@v7
          with:
            github-token: ${{ secrets.OPENHANDS_PAT_TOKEN }}
            script: |
              const issueType = process.env.ISSUE_TYPE;
              const commentBody = "finish"
              github.rest.issues.createComment({
                issue_number: ${{ env.ISSUE_NUMBER }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              })
              
              
